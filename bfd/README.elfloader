ELF Loader
=========

An ELF (Executable and Linkable Format) loader is a program or part of an

operating system that loads executable files in the ELF format into memory

and prepares them for execution.  The ELF File Reader is responsible for

reading an ELF file, loading it into memory, processing relocations, and

ensuring that the program can run correctly on the target system.


The implementation is contained in the following files:
read_elf.[ch]                   - read the ELF file
load_sections.c                 - load the sections of the ELF file into memory
reloc_sections.[ch]             - relocate the sections in memory
examples/elfLoaderExample.c     - example code for usage of the library


To run the code, follow these steps:
====================================
   1. To build binutils through the tt-gcc framework:

       - Create a build directory outside the tt-gcc directory, use command:
		
             mkdir build

       - Go to build directory and run:

             ../tt-gcc/configure --prefix=<install dir> --enable-multilib \
             --with-arch=rv32iywu --with-abi=ilp32
        
       - Compile the code from the build directory; use the command:

             make -j 30

   2. After successfully building the project, you should be able to find the
      following files inside the prefix directory:

      x86_64-pc-linux-gnu/riscv32-unknown-elf/include/read_elf.h
      x86_64-pc-linux-gnu/riscv32-unknown-elf/include/reloc_sections.h
      x86_64-pc-linux-gnu/riscv32-unknown-elf/lib/libloader.a
      x86_64-pc-linux-gnu/riscv32-unknown-elf/lib/libloader.la

   3. After successfully building the project, go to the bfd/examples directory
      and compile the sample test case as below:

         gcc -I<prefix_dir>/x86_64-pc-linux-gnu/riscv32-unknown-elf/include \
           elfLoaderExample.c -o elfLoader \
           -L<prefix_dir>/x86_64-pc-linux-gnu/riscv32-unknown-elf/lib -lelf \
           -lloader

      Replace the <prefix_dir> with the directory given during the build of
      the toolchain.

   4. After compiling the sample test case, run using:

         ./elfLoader <Shared_Lib/PIE> <output_filename> <debug_level>

      Where, output_filename is the name of a file where the debug output
             is dumped.
             debug_level is a value between 0 and 3:
             0 - Print nothing
             1 - Print basic information
             2 - Print some more details
             3 - Print all details

